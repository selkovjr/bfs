#!/usr/bin/env perl

# Erasmus spreadsheet fields
#
#  0: Serial No.
#  1: Week No.
#  2: Sample ID
#  3: Sample type
#  4: Species (English)
#  5: Age
#  6: Sex
#  7: EURING code
#  8: Location
#  9: Bird ring number
# 10: Location type
# 11: Collection date
# 12: Arrival date
# 13: Pool ID
# 14: Indiv. ID
# 15: Alliquote date
# 16: Taqman date
# 17: MA
# 18: MA-Ct
# 19: H5
# 20: H5-Ct
# 21: H7
# 22: H7-Ct
# 23: Virus isolation
# 24: E1
# 25: E2
# 26: Virus pathotype
# 27: HA subtype
# 28: NA subtype
# 29: Remarks
# 30: LAT-Y
# 31: LONG-X
# 32: Health

use strict;
use warnings FATAL => qw( all );
use feature qw/state say/;
use 5.010;
use Data::Dumper;

my %field = (
  samples => [
    'Sample ID',         # id
    'Serial No.',        # emc_id
    'Collection date',   # date
    'species',           # species (matching 'Species (English)'
    'Age',               # age
    'Sex',               # sex
    'Bird ring number',  # ring
    'Health',            # clin_st, vital_st
    '-',                 # tos -- does not exist in the spreadsheet
    '-',                 # capture_method -- does not exist in the spreadsheet
    'Location',          # location
    'Sample type',       # type
  ],

  sera => [
    'Sample ID',         # sample
    '-',                 # date
    '-',                 # status
    '-'                  # plate
  ],

  diagnostics => [
    'Sample ID',       # sample
    'Arrival date',    # rec_date
    '-',               # date
    'Pool ID',         # pool
    'MA',              # ma_status
    'MA-Ct',           # ma_ct
    'H5',              # h5_status
    'H5-Ct',           # h5_ct
    '-',               # h5_pt
    'H7',              # h7_status
    'H7-Ct',           # h7_ct
    '-',               # h7_pt
    'H9',              # h9_status
    'H9-Ct'            # h9_ct
  ],

  cultures => [
    'Sample ID',       # sample
    '-',               # id (AHVLA id)
    'E1',              # e1
    'E2',              # e2
    'Virus isolation', # isolation
    'Virus pathotype', # pathotype
    'HA subtype',      # ha_subtype
    'NA subtype',      # na_subtype
  ]
);


my %location = map {lc $_->[1] => $_->[0]} (
  [1,  'Alkhasikhe Lake 1'],
  [2,  'Alkhasikhe Lake 2'],
  [3,  'Beshkenti'],
  [4,  'Grigoleti'],
  [5,  'Heretskari'],
  [6,  'Hunting shop 1'],
  [7,  'Jandari Lake'],
  [8,  'Kazbegi Brewery'],
  [9,  'Kumisi Lake'],
  [10, 'Lagodekhi'],
  [11, 'Lekiani'],
  [12, 'Napareuli'],
  [13, 'Natanebi'],
  [14, 'Paliastomi Lake'],
  [15, 'Ponichala Park'],
  [16, 'Poti'],
  [17, 'Pumping station'],
  [18, 'Rustavi'],
  [19, 'Tbilisi River'],
  [20, 'Telavi'],
  [21, 'village'],
  [22, 'other'],
);

my %health = (
  'hunted without clinical signs' => {clin_st => 'normal', vital_st => 'hunted'},
  'live without clinical signs' => {clin_st => 'normal', vital_st => 'live'},
);

my %age = (
  j => 'juvenile',
  a => 'adult',
);

my %isolation = (
  positive => 't',
  negative => 'f',
  'not performed' => '\N',
);

my @f;

my %birdByName;
my %birdByCommonName;
open BIRDS, "<birds.tab" or die "can't open birds.tab: $!";
while (<BIRDS>) {
  chomp;
  @f = split "\t";
  $birdByName{lc $f[4]} = $f[0] if $f[4] and $f[4] ne '\N';
  $birdByCommonName{lc $f[5]} = $f[0] if $f[5];
}
open BIRDS, "<domestic_birds.tab" or die "can't open domestic_birds.tab: $!";
while (<BIRDS>) {
  chomp;
  @f = split "\t";
  $birdByName{lc $f[4]} = $f[0] if $f[4] and $f[4] ne '\N';
  $birdByCommonName{lc $f[5]} = $f[0] if $f[5];
}

open SAMPLE, ">samples.tab" or die "can't open samples.tab: $!";
open DIAG, ">diagnostics.tab" or die "can't open diagnostics.tab: $!";
open CULT, ">cultures.tab" or die "can't open cultures.tab: $!";
open REJECT, ">reject.tab" or die "can't open reject.tab: $!";

$_  = <>;
chomp;
my @header = split "\t", $_;

my %column;
my %reject;
foreach my $i (0 .. $#header) {
  $column{$header[$i]} = $i;
  $reject{$header[$i]} = $i;
}

my @fields;

while (<>) {
  # last if $. > 4;
  chomp;
  @f = split "\t", $_;
  foreach my $i (0 .. $#f) {
    $f[$i] = '\N' unless $f[$i] gt '';
    $f[$i] = 'N/A' if $f[$i] eq '#N/A';
  }

  # ------------- Samples -------------
  undef @fields;
  foreach my $key ( @{$field{samples}} ) {
    if ($key eq 'species') {
      my $id;
      my $text = lc $f[$column{'Species (English)'}];
      $text = 'cattle egret' if $text eq 'western cattle egret';
      $text = 'common moorhen' if $text eq 'moorhen';
      $text = 'eurasian blackbird' if $text eq 'blackbird';
      $text = 'eurasian woodcock' if $text eq 'woodcock';
      $text = 'european bee-eater' if $text eq 'bee-eater';
      $text = 'greater white-fronted Goose' if $text eq 'white-fronted goose';
      #$text = 'mallard' if $text eq 'domestic duck';
      # 'domestic duck' needs to be kept this way; a few more domestic birds
      # have now been added to taxonomy
      $text = 'northern pintail' if $text eq 'pintail';
      $text = 'northern shoveler' if $text eq 'shoveler';
      $text = 'red-throated loon' if $text eq 'red-throated diver';
      $text = 'swan goose' if $text eq 'goose';
      if ( $text eq '\n' or $text eq 'domestic' ) {
        push @fields, '\N';
      }
      elsif ( $id = $birdByCommonName{lc $text} ) {
        push @fields, $id;
      }
      elsif ( $id = $birdByName{lc $text} ) {
        push @fields, $id;
      }
      else {
        die "can't match species: '$text'";
      }
      delete $reject{'Species (English)'};
    }
    elsif ($key eq 'Age') {
      my $text = $f[$column{$key}];
      push @fields, ($age{lc $text} or $text);
      delete $reject{$key};
    }
    elsif ($key eq 'Location') {
      my $text = $f[$column{$key}];
      push @fields, ($location{lc $text} or $text);
      delete $reject{$key};
    }
    elsif ($key eq 'LAT-Y' or $key eq 'LONG-X') {
      my $text = $f[$column{$key}];
      $text =~ s%N/A%\\N%; #can't have text in a float field
      push @fields, $text;
      delete $reject{$key};
    }
    elsif ($key eq 'Health') {
      my $text = $f[$column{$key}];
      if ($health{$text}) {
        push @fields, $health{$text}->{clin_st};
        push @fields, $health{$text}->{vital_st};
      }
      else {
        push @fields, '\N', '\N';
      }
      delete $reject{$key};
    }
    elsif ($key eq 'Sample type') {
      my $text = $f[$column{$key}];
      $text =~ s%tracheal or oropharyngeal swab%tracheal/op swab%;
      push @fields, $text;
      delete $reject{$key};
    }
    else {
      if (defined $column{$key}) {
        push @fields, $f[$column{$key}];
        delete $reject{$key};
      }
      else {
        # field does not exist in the spreadsheet
        push @fields, '\N';
      }
    }
  }

  next if join('', @fields[2 .. 11]) eq '\N\N\N\N\N\N\N\N\N\N';

  say SAMPLE join("\t", @fields) if not grep !/\\N/, @fields[2 .. -1];


  # ------------- Diagnostics -------------
  undef @fields;
  foreach my $key ( @{$field{diagnostics}} ) {
    if (0) {
      # special treatment of fields
    }
    else {
      if (defined $column{$key}) {
        my $text = $f[$column{$key}];
        $text =~ s/^n$/-/;
        $text =~ s/^p$/+/;
        push @fields, $text;
        delete $reject{$key};
      }
      else {
        # field does not exist in the spreadsheet
        push @fields, '\N';
      }
    }
  }
  say DIAG join("\t", @fields);


  # ------------- Cultures -------------
  undef @fields;
  my $isolation_not_null = undef;
  foreach my $key ( @{$field{cultures}} ) {
    if ($key eq 'Virus isolation') {
      my $text = $f[$column{$key}];
      push @fields, $isolation{lc $text};
      $isolation_not_null = 1 unless $text eq 'not performed';
      delete $reject{$key};
    }
    elsif ($key eq 'Virus pathotype') {
      my $text = $f[$column{'Virus pathotype'}];
      $text =~ s/not identifiable/unidentifiable/i;
      push @fields, $text;
      delete $reject{$key};
    }
    elsif ($key eq 'HA subtype') {
      my $text = $f[$column{'HA subtype'}];
      $text =~ s/^H //;
      $text =~ s/not identifiable/unidentifiable/i;
      push @fields, $text;
      delete $reject{$key};
    }
    elsif ($key eq 'NA subtype') {
      my $text = $f[$column{'NA subtype'}];
      $text =~ s/^N //;
      $text =~ s/not identifiable/unidentifiable/i;
      push @fields, $text;
      delete $reject{$key};
    }
    else {
      if (defined $column{$key}) {
        push @fields, $f[$column{$key}];
        delete $reject{$key};
      }
      else {
        # field does not exist in the spreadsheet
        push @fields, '\N';
      }
    }
  }
  if ($isolation_not_null) {
    say CULT join("\t", @fields);
  }

  # ------------- Rejected fields -------------
  undef @fields;
  foreach my $key ( sort keys %reject ) {
    push @fields, $f[$column{$key}];
  }
  say REJECT join("\t", @fields);
}

# Print rejected headers
undef @fields;
foreach my $key ( sort keys %reject ) {
  push @fields, $key;
}
say REJECT join("\t", @fields);
